import random
from pwn import *
from binascii import unhexlify, hexlify

def is_prime(n):

	# Credits: rosettacode.org, Miller-Rabin 
	# https://rosettacode.org/wiki/Miller%E2%80%93Rabin_primality_test

    if n!=int(n):
        return False
    n=int(n)

    if n==0 or n==1 or n==4 or n==6 or n==8 or n==9:
        return False
        
    if n==2 or n==3 or n==5 or n==7:
        return True
    s = 0
    d = n-1
    while d%2==0:
        d>>=1
        s+=1
    assert(2**s * d == n-1)
  
    def trial_composite(a):
        if pow(a, d, n) == 1:
            return False
        for i in range(s):
            if pow(a, 2**i * d, n) == n-1:
                return False
        return True  
 
    for i in range(8):
        a = random.randrange(2, n)
        if trial_composite(a):
            return False
 
    return True

def getNextPrime(number):

	while True:
		if is_prime(number):
			return number
		else:
			number += 1

def enc(x, e, n):
    int_x = int.from_bytes(x, "big")
    y = pow(int_x,e,n)
    return hexlify(y.to_bytes(256, 'big'))

def dec(y, d, n):
    int_y = int.from_bytes(unhexlify(y), "big")
    x = pow(int_y,d,n)
    return x.to_bytes(256, 'big')

def solve():

	encoded_flag = "adc74cd3abde54a74c2daa7ceb43e4526a17ed3b8c231e9fe37c6041a3c13861f1fbf9d2b919ec672bed85390d7039accc053274cfc976fcbd1f826e8af67dbfdd9ada20eb7a8edb6e14745f5cba60c35cb9a9e304552d2e3b4dcdb46568a1796f7093b39b078bab53b88c03cf43ff546ec1f8cd82062141656d18a6c23e6ed4"
	p = getNextPrime(2**512)
	q = getNextPrime(2**513)
	n = p*q
	e = 0x10001
	d = pow(e, -1, ((p-1)*(q-1)))

	original_flag = dec(encoded_flag, d, n)
	print(original_flag.decode())

if __name__ == '__main__':
	solve()